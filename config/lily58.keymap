/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp ESC           &kp N1  &kp N2  &kp N3    &kp N4    &kp N5                         &kp N6  &kp N7    &kp N8                &kp N9   &kp N0    &kp GRAVE
&kp TAB           &kp Q   &kp W   &kp E     &kp R     &kp T                          &kp Y   &kp U     &kp I                 &kp O    &kp P     &kp MINUS
&kp LEFT_SHIFT    &kp A   &kp S   &kp D     &kp F     &kp G                          &kp H   &kp J     &kp K                 &kp L    &kp SEMI  &kp SQT
&kp LEFT_CONTROL  &kp Z   &kp X   &kp C     &kp V     &kp B   &kp LBKT     &kp RBKT  &kp N   &kp M     &kp COMMA             &kp DOT  &kp FSLH  &kp RC(RIGHT_SHIFT)
                                  &kp LALT  &kp LGUI  &mo 1   &kp SPACE    &kp RET   &mo 2   &kp BSPC  &kp LA(LEFT_CONTROL)
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // --------------------------------------------------------------------------------------------------------------
            // | LPAD  | BRDn | BRUp |  MUT |  Vo- |  Vo+ |                   |      |       |       |      |       |       |
            // |  F1   |  F2  |  F3  |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !   |  @   |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |      |      |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                       |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp C_PLAY  &kp C_NEXT  &kp C_PREV      &kp C_MUTE       &kp C_VOL_DN   &kp C_VOL_UP                                     &kp PRINTSCREEN  &kp INSERT              &kp HOME                &kp DELETE            &kp CAPSLOCK             &caps_word
&kp F1      &kp F2      &kp F3          &kp F4           &kp F5         &kp F6                                           &kp F7           &kp F8                  &kp F9                  &kp F10               &kp F11                  &kp F12
&trans      &none       &none           &kp LC(Z)        &kp LS(LC(Z))  &none                                            &kp PAGE_UP      &kp LEFT_ARROW          &kp DOWN_ARROW          &kp UP_ARROW          &kp RIGHT_ARROW          &kp PAGE_DOWN
&trans      &none       &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp HASH       &kp LA(LEFT_ARROW)  &kp LA(LC(T))    &kp LS(F5)  &kp RA(RIGHT)    &kp LS(LC(LEFT_ARROW))  &kp LS(LC(DOWN_ARROW))  &kp LS(LC(UP_ARROW))  &kp LS(LC(RIGHT_ARROW))  &kp RIGHT_SHIFT
                                        &trans           &trans         &trans              &trans           &trans      &trans           &trans                  &kp RIGHT_GUI
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &trans                &trans                 &trans          &trans         &trans                                    &bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &kp EXCLAMATION       &kp AT_SIGN            &kp HASH        &kp DOLLAR     &trans                                    &kp N0       &kp N1        &kp N2        &kp N3        &kp STAR      &none
&trans  &kp PERCENT           &kp LCTRL              &kp AMPERSAND   &kp ASTERISK   &kp PIPE                                  &kp MINUS    &kp N4        &kp N5        &kp N6        &kp SLASH     &trans
&trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &kp LESS_THAN  &kp GREATER_THAN  &trans       &trans     &kp KP_PLUS  &kp N7        &kp N8        &kp N9        &kp EQUAL     &trans
                                                     &trans          &trans         &trans            &mkp LCLK    &mkp RCLK  &trans       &trans        &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
